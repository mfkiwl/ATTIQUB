%%#######################################################################
% #######################################################################
% ###                                                                 ###
% ###  @@@@@@@@ @@@@@@@ @@@@@@@ @@@@@ @@@@@@@@@ @@@    @@@ @@@@@@@@   ###
% ###  @@@@@@@@ @@@@@@@ @@@@@@@ @@@@@ @@    (@@ @@@    @@@ @@@  @@@   ###
% ###  @@    @@   @@@     @@@    @@@  @@    (@@ @@@    @@@ @@@@@@@@@  ###
% ###  @@@@@@@@   @@@     @@@    @@@  @@@@@@@@@ @@@    @@@ @@@@@@@@@  ###
% ###  @@    @@   @@@     @@@   @@@@@ @@@@@@@@@ @@@@@@@@@@ @@@   @@@  ###
% ###  @@    @@   @@@     @@@   @@@@@     (@@@  @@@@@@@@@@ @@@@@@@@@  ###
% ###                                                                 ###
% ### Project ATTIQUB: Classical Rodrigues Parameters Toolbox         ###
% ### Conversion of a CRP into direction cosine matrix form           ###
% ###                                                                 ###
% ### By Samuel Low (15-12-2020), DSO National Laboratories           ###
% ###                                                                 ###
% #######################################################################
% #######################################################################

function [dcm] = crp_conv2dcm(crp)

% Input: 1x3 CRP vector
% Output: 3x3 DCM

% Compute the individual elements of the DCM.
dcm = zeros(3,3);
dcm(1,1) = 1 + crp(1)^2 - crp(2)^2 - crp(3)^2;
dcm(1,2) = 2 * ( crp(1) * crp(2) + crp(3) );
dcm(1,3) = 2 * ( crp(1) * crp(3) - crp(2) );
dcm(2,1) = 2 * ( crp(2) * crp(1) - crp(3) );
dcm(2,2) = 1 - crp(1)^2 + crp(2)^2 - crp(3)^2;
dcm(2,3) = 2 * ( crp(2) * crp(3) + crp(1) );
dcm(3,1) = 2 * ( crp(3) * crp(1) + crp(2) );
dcm(3,2) = 2 * ( crp(3) * crp(2) - crp(1) );
dcm(3,3) = 1 - crp(1)^2 - crp(2)^2 + crp(3)^2;

% Scale the DCM.
dcm = ( 1.0 / ( 1 + dot(crp,crp) ) ) * dcm;

end

